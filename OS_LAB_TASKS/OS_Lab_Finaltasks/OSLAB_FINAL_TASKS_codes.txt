Q1)
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>
#define SIZE 10
int arr[SIZE];
// Bubble sort
void bubble_sort(int *start, int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (start[j] > start[j + 1]) {
                int temp = start[j];
                start[j] = start[j + 1];
                start[j + 1] = temp;
            }
        }
    }
}
void merge(int *arr, int *left, int left_size, int *right, int right_size) {
    int i = 0, j = 0, k = 0;
    while (i < left_size && j < right_size) {
        if (left[i] <= right[j]) {
            arr[k++] = left[i++];
        } else {
            arr[k++] = right[j++];
        }
    }
    while (i < left_size) {
        arr[k++] = left[i++];
    }
    while (j < right_size) {
        arr[k++] = right[j++];
    }
}
void *sort_first_half(void *arg) {
    int half_size = SIZE / 2;
    bubble_sort(arr, half_size);
    return NULL;
}
void *sort_second_half(void *arg) {
    int half_size = SIZE / 2;
    bubble_sort(arr + half_size, SIZE - half_size); // Handles odd SIZE
    return NULL;
}
int main() {
    srand(time(NULL));
    for (int i = 0; i < SIZE; i++) {
        arr[i] = rand() % 100;
    }
    printf("Unsorted array:\n");
    for (int i = 0; i < SIZE; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    pthread_t thread1, thread2;
    pthread_create(&thread1, NULL, sort_first_half, NULL);
    pthread_create(&thread2, NULL, sort_second_half, NULL);
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    int *left = arr;
    int *right = arr + SIZE / 2;
    int left_size = SIZE / 2;
    int right_size = SIZE - left_size;

    int *merged = (int *)malloc(sizeof(int) * SIZE);
    merge(merged, left, left_size, right, right_size);
    printf("Merged sorted array:\n");
    for (int i = 0; i < SIZE; i++) {
        printf("%d ", merged[i]);
    }
    printf("\n");
    free(merged);
    return 0;
}

Q2)
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<unistd.h>
#define SIZE 3
#define NUM_THREADS 3
int matrixA[SIZE][SIZE];
int matrixB[SIZE][SIZE];
int result[SIZE][SIZE];

void *funct(void *arg) {
    int row = *(int *)arg;
    for(int col=0;col<SIZE;col++) {
        result[row][col] = 0;
        for(int k=0;k<SIZE;k++) {
            result[row][col] += matrixA[row][k] * matrixB[k][col];
        }
    }
    return NULL;
}

int main() {
    pthread_t threadids[NUM_THREADS];
    int thread_args[NUM_THREADS];
    // Initialize matrices
    printf("Enter the elements of matrix A:\n");
    for(int i=0;i<SIZE;i++) {
        for(int j=0;j<SIZE;j++) {
            scanf("%d", &matrixA[i][j]);
        }
    }
    printf("Enter the elements of matrix B:\n");
    for(int i=0;i<SIZE;i++) {
        for(int j=0;j<SIZE;j++) {
         scanf("%d", &matrixB[i][j]);
        }
    }

    for(int i=0;i<NUM_THREADS;i++) {
        thread_args[i] = i;
        if(pthread_create(&threadids[i],NULL,funct,(void *) &thread_args[i]) !=0) {
            perror("Error creating thread");
            exit(1);
        }
    }
    for(int i=0;i<NUM_THREADS;i++) {
        pthread_join(threadids[i],NULL);
    }
    printf("Resultant matrix:\n");
    for(int i=0;i<SIZE;i++) {
        for(int j=0;j<SIZE;j++) {
            printf("%d ", result[i][j]);
        }
        printf("\n");
    }
    return 0;
}

Q3)
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<fcntl.h>
#define SIZE 1024 
int main(int argc,char *argv[]) {
    if(argc!=3) {
        printf("Usage: %s <source_file> <destination_file>\n",argv[0]);
        exit(EXIT_FAILURE);
    }
    int srcfd = open(argv[1],O_RDONLY);
    if(srcfd<0) {
        perror("Error opening source file");
        exit(EXIT_FAILURE);
    }
    int destfd = open(argv[2],O_WRONLY|O_CREAT|O_TRUNC,0644);
    if(destfd<0) {
        perror("Error opening destination file");
        close(srcfd);
        exit(EXIT_FAILURE);
    }
    char buffer[SIZE];
    ssize_t bytesread;

    while((bytesread = read(srcfd,buffer,SIZE)) > 0) {
        ssize_t byteswritten = write(destfd,buffer,bytesread);
        if(byteswritten<0) {
            perror("Error writing to destination file");
            close(srcfd);
            close(destfd);
            exit(EXIT_FAILURE);
        }
        if(byteswritten<bytesread) {
            perror("Error: Not all bytes written to destination file");
            close(srcfd);
            close(destfd);
            exit(EXIT_FAILURE);
        }
    }
    if(bytesread<0) {
        perror("Error reading from source file");
        close(srcfd);
        close(destfd);
        exit(EXIT_FAILURE);
    }
    close(srcfd);
    close(destfd);
    return 0;
}

Q4)
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<unistd.h>
#include<signal.h>

void signal_handler(int signum) {
    printf("Caught signal %d\n", signum);
    exit(0);
}
int main() {
    signal(SIGINT,signal_handler);
    while(1) {
        printf("Running...\n");
        sleep(2);

    }
    return 0;
}

Q5)
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<unistd.h>
#include<signal.h>
#include<stdbool.h>
bool paused=1;
void signal_stsp(int signum) {
    paused =0;
    printf("Caught signal %d. Press Ctrl+C to pause. \n", signum);
}
void signal_handler(int signum) {
    paused=1;
    printf("Caught signal %d. Press Ctrl+Z to resume. \n", signum);
}
int main() {
    signal(SIGINT,signal_handler);
    signal(SIGTSTP,signal_stsp);
    int i=10;
    while(i>0) {
        if(!paused) {
            printf("Running...\n");
            sleep(1);
            i--;
        } else {
            printf("Paused...\n");
            sleep(1);
        }
    }
    return 0;
}

Q6)
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<unistd.h>
#include<signal.h>
volatile sig_atomic_t flag= 0;
void signal_handler(int signum) {
    if (signum == SIGUSR1) {
        flag = !flag; // Toggle the flag
    }
}
int main() {
    signal(SIGUSR1,signal_handler);
    printf("Process ID: %d\n", getpid());
    while(1) {
        if(!flag){
        printf("Working...\n");
        sleep(3);
        } else {
            printf("Paused by SIGUSR1\n");
            sleep(3);
        }
    }
    return 0;
}

Q7)
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<unistd.h>
#include<semaphore.h>
#define NUM_THREADS 5
int counter =0;
sem_t sem;

void *func(void *arg) {
    int i = *(int *) arg;
    sem_wait(&sem);
    //Critical section
    printf("Thread %d: Counter before increment: %d\n", i, counter);
    counter++;
    printf("Thread %d: Counter after increment: %d\n", i, counter);
    sem_post(&sem);
    pthread_exit(NULL);
}
int main(){
    sem_init(&sem,0,1);
    pthread_t threads[NUM_THREADS];
    int thread_args[NUM_THREADS];   
    for(int i=0;i<NUM_THREADS;i++){
       thread_args[i] = i;
       if(pthread_create(&threads[i], NULL, func, (void *)&thread_args[i]) != 0) {
           perror("Failed to create thread");
           exit(EXIT_FAILURE);
       }
    }
    for(int i=0;i<NUM_THREADS;i++){
       pthread_join(threads[i], NULL);
    }
    printf("Final Counter Value: %d\n", counter);
    sem_destroy(&sem);
    printf("Semaphore destroyed\n");
    return 0;
}

Q8)
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<fcntl.h>
#include<pthread.h>
#include<semaphore.h>

#define N 5 
#define THINKING 0
#define HUNGRY 1
#define EATING 2
#define LEFT(i) ((i + N - 1) % N)
#define RIGHT(i) ((i + 1) % N)

int state[N];
sem_t mutex;
sem_t S[N]; 

void test(int i) {
    if(state[i] == HUNGRY && state[LEFT(i)] != EATING && state[RIGHT(i)] != EATING) {
        state[i] = EATING;
        sleep(2);
        printf("Philosopher %d is eating\n", i + 1);
        sem_post(&S[i]);
    }
}
void takeforks(int i) {
    sem_wait(&mutex);
    state[i] = HUNGRY;
    printf("Philosopher %d is hungry\n",i+1);
    test(i);
    sem_post(&mutex);
    sem_wait(&S[i]);
}
void putforks(int i) {
    sem_wait(&mutex);
    state[i] = THINKING;
    printf("Philosopher %d is thinking\n",i+1);
    test(LEFT(i));
    test(RIGHT(i));
    sem_post(&mutex);   
}

void *philosopher(void *num) {
    while(1) {
        int i = (*(int *)num);
        sleep(1);
        takeforks(i);
        sleep(0);
        putforks(i);
    }
}
int main() {
    int i;
    pthread_t thread_id[N];
    int thread_args[N];
    sem_init(&mutex, 0, 1);
    for(i = 0; i < N; i++) {
        state[i] = THINKING;
        sem_init(&S[i], 0, 0);
    }
    for(i = 0; i < N; i++) {
        thread_args[i] = i;
        pthread_create(&thread_id[i], NULL, philosopher,(void *) &thread_args[i]);
        printf("Philosopher %d is thinking\n", i + 1);
    }
    for(i = 0; i < N; i++) {
        pthread_join(thread_id[i], NULL);
    }
    return 0;
    sem_destroy(&mutex);
    for(i = 0; i < N; i++) {
        sem_destroy(&S[i]);
    }
}

Q9)
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<unistd.h>
#define NUM_THREADS 5
int counter =0; 
pthread_mutex_t mutex;

void *func(void *arg) {
    int i = *(int *) arg;
    pthread_mutex_lock(&mutex);
    //Critical section
    printf("Thread %d: Counter before increment: %d\n", i, counter);
    counter++;
    printf("Thread %d: Counter after increment: %d\n", i, counter);
    pthread_mutex_unlock(&mutex);
    pthread_exit(NULL);
}
int main(){
    pthread_mutex_init(&mutex,NULL);
    pthread_t threads[NUM_THREADS];
    int thread_args[NUM_THREADS];   
    for(int i=0;i<NUM_THREADS;i++){
       thread_args[i] = i;
       if(pthread_create(&threads[i], NULL, func, (void *)&thread_args[i]) != 0) {
           perror("Failed to create thread");
           exit(EXIT_FAILURE);
       }
    }
    for(int i=0;i<NUM_THREADS;i++){
       pthread_join(threads[i], NULL);
    }
    printf("Final Counter Value: %d\n", counter);
    pthread_mutex_destroy(&mutex);
    printf("Mutex destroyed\n");
    return 0;
}

Q10)
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<unistd.h>
#define NUM_THREADS 5
int balance =0; 
pthread_mutex_t mutex;

void *func(void *arg) {
    int i = *(int *) arg;
    pthread_mutex_lock(&mutex);
    //Critical section
    printf("Person %d accessing the ATM \n",i);
    printf("Enter 1. for withdrawal and 2. for deposit\n");
    int choice;
    scanf("%d",&choice);
    switch(choice){
        case 1:
            printf("Enter amount to withdraw\n");
            int withdraw;
            scanf("%d",&withdraw);
            if(withdraw>balance){
                printf("Insufficient balance\n");
            }else{
                balance-=withdraw;
                printf("Withdrawal successful. New balance: %d\n",balance);
            }
            break;
        case 2:
            printf("Enter amount to deposit\n");
            int deposit;
            scanf("%d",&deposit);
            balance+=deposit;
            printf("Deposit successful. New balance: %d\n",balance);
            break;
        default:
            printf("Invalid choice\n");
    }
    pthread_mutex_unlock(&mutex);
    pthread_exit(NULL);
}
int main(){
    pthread_mutex_init(&mutex,NULL);
    pthread_t threads[NUM_THREADS];
    int thread_args[NUM_THREADS];   
    for(int i=0;i<NUM_THREADS;i++){
       thread_args[i] = i;
       if(pthread_create(&threads[i], NULL, func, (void *)&thread_args[i]) != 0) {
           perror("Failed to create thread");
           exit(EXIT_FAILURE);
       }
    }
    for(int i=0;i<NUM_THREADS;i++){
       pthread_join(threads[i], NULL);
    }
    printf("Final Balance Value: %d\n", balance);
    pthread_mutex_destroy(&mutex);
    printf("Mutex destroyed\n");
    return 0;
}